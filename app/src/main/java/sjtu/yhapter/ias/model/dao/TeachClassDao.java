package sjtu.yhapter.ias.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import sjtu.yhapter.ias.model.pojo.TeachClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACH_CLASS".
*/
public class TeachClassDao extends AbstractDao<TeachClass, Long> {

    public static final String TABLENAME = "TEACH_CLASS";

    /**
     * Properties of entity TeachClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, int.class, "status", false, "STATUS");
        public final static Property StudentId = new Property(2, String.class, "studentId", false, "STUDENT_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
    }

    private Query<TeachClass> student_TeachClassesQuery;

    public TeachClassDao(DaoConfig config) {
        super(config);
    }
    
    public TeachClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACH_CLASS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: status
                "\"STUDENT_ID\" TEXT," + // 2: studentId
                "\"NAME\" TEXT);"); // 3: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACH_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeachClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(3, studentId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeachClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
 
        String studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindString(3, studentId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeachClass readEntity(Cursor cursor, int offset) {
        TeachClass entity = new TeachClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // studentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeachClass entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setStudentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeachClass entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeachClass entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TeachClass entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teachClasses" to-many relationship of Student. */
    public List<TeachClass> _queryStudent_TeachClasses(String studentId) {
        synchronized (this) {
            if (student_TeachClassesQuery == null) {
                QueryBuilder<TeachClass> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentId.eq(null));
                student_TeachClassesQuery = queryBuilder.build();
            }
        }
        Query<TeachClass> query = student_TeachClassesQuery.forCurrentThread();
        query.setParameter(0, studentId);
        return query.list();
    }

}
