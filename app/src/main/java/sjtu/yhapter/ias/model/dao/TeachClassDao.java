package sjtu.yhapter.ias.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sjtu.yhapter.ias.model.pojo.TeachClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACH_CLASS".
*/
public class TeachClassDao extends AbstractDao<TeachClass, Long> {

    public static final String TABLENAME = "TEACH_CLASS";

    /**
     * Properties of entity TeachClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Classid = new Property(0, Long.class, "classid", true, "_id");
        public final static Property Classname = new Property(1, String.class, "classname", false, "CLASSNAME");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
    }


    public TeachClassDao(DaoConfig config) {
        super(config);
    }
    
    public TeachClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACH_CLASS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: classid
                "\"CLASSNAME\" TEXT," + // 1: classname
                "\"DESC\" TEXT," + // 2: desc
                "\"STATUS\" INTEGER NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACH_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeachClass entity) {
        stmt.clearBindings();
 
        Long classid = entity.getClassid();
        if (classid != null) {
            stmt.bindLong(1, classid);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(2, classname);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeachClass entity) {
        stmt.clearBindings();
 
        Long classid = entity.getClassid();
        if (classid != null) {
            stmt.bindLong(1, classid);
        }
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(2, classname);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeachClass readEntity(Cursor cursor, int offset) {
        TeachClass entity = new TeachClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // classid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // classname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.getInt(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeachClass entity, int offset) {
        entity.setClassid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeachClass entity, long rowId) {
        entity.setClassid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeachClass entity) {
        if(entity != null) {
            return entity.getClassid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TeachClass entity) {
        return entity.getClassid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
