package sjtu.yhapter.ias.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sjtu.yhapter.ias.model.pojo.DownloadTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_TASK".
*/
public class DownloadTaskDao extends AbstractDao<DownloadTask, Long> {

    public static final String TABLENAME = "DOWNLOAD_TASK";

    /**
     * Properties of entity DownloadTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Link = new Property(1, String.class, "link", false, "LINK");
        public final static Property LocalPath = new Property(2, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property TaskName = new Property(3, String.class, "taskName", false, "TASK_NAME");
        public final static Property StartTime = new Property(4, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Size = new Property(6, long.class, "size", false, "SIZE");
        public final static Property Progress = new Property(7, long.class, "progress", false, "PROGRESS");
    }


    public DownloadTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LINK\" TEXT," + // 1: link
                "\"LOCAL_PATH\" TEXT," + // 2: localPath
                "\"TASK_NAME\" TEXT," + // 3: taskName
                "\"START_TIME\" INTEGER," + // 4: startTime
                "\"END_TIME\" INTEGER," + // 5: endTime
                "\"SIZE\" INTEGER NOT NULL ," + // 6: size
                "\"PROGRESS\" INTEGER NOT NULL );"); // 7: progress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(2, link);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(4, taskName);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime.getTime());
        }
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getProgress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(2, link);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(4, taskName);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(5, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(6, endTime.getTime());
        }
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getProgress());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadTask readEntity(Cursor cursor, int offset) {
        DownloadTask entity = new DownloadTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // link
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskName
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // startTime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // endTime
            cursor.getLong(offset + 6), // size
            cursor.getLong(offset + 7) // progress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSize(cursor.getLong(offset + 6));
        entity.setProgress(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
