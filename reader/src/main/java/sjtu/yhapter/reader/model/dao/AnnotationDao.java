package sjtu.yhapter.reader.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import sjtu.yhapter.reader.model.pojo.Annotation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANNOTATION".
*/
public class AnnotationDao extends AbstractDao<Annotation, Long> {

    public static final String TABLENAME = "ANNOTATION";

    /**
     * Properties of entity Annotation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property ChapterId = new Property(2, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property StartIndex = new Property(3, long.class, "startIndex", false, "START_INDEX");
        public final static Property EndIndex = new Property(4, long.class, "endIndex", false, "END_INDEX");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
    }


    public AnnotationDao(DaoConfig config) {
        super(config);
    }
    
    public AnnotationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANNOTATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 1: bookId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 2: chapterId
                "\"START_INDEX\" INTEGER NOT NULL ," + // 3: startIndex
                "\"END_INDEX\" INTEGER NOT NULL ," + // 4: endIndex
                "\"CONTENT\" TEXT," + // 5: content
                "\"TYPE\" TEXT," + // 6: type
                "\"DATE\" INTEGER," + // 7: date
                "\"USER_ID\" INTEGER NOT NULL ," + // 8: userId
                "\"NOTE\" TEXT);"); // 9: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANNOTATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Annotation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterId());
        stmt.bindLong(4, entity.getStartIndex());
        stmt.bindLong(5, entity.getEndIndex());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getUserId());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Annotation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterId());
        stmt.bindLong(4, entity.getStartIndex());
        stmt.bindLong(5, entity.getEndIndex());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getUserId());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Annotation readEntity(Cursor cursor, int offset) {
        Annotation entity = new Annotation( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bookId
            cursor.getLong(offset + 2), // chapterId
            cursor.getLong(offset + 3), // startIndex
            cursor.getLong(offset + 4), // endIndex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.getLong(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // note
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Annotation entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setChapterId(cursor.getLong(offset + 2));
        entity.setStartIndex(cursor.getLong(offset + 3));
        entity.setEndIndex(cursor.getLong(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUserId(cursor.getLong(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Annotation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Annotation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Annotation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
